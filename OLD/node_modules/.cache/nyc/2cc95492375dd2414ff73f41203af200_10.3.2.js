var cov_2cklmrsl45=function(){var path='/home/aneopsy/AneoChain/src/miner/index.js',hash='a0d5c1311585990bf5111f995cc45244bb73e79c',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/aneopsy/AneoChain/src/miner/index.js',statementMap:{'0':{start:{line:1,column:10},end:{line:1,column:26}},'1':{start:{line:2,column:14},end:{line:2,column:38}},'2':{start:{line:3,column:14},end:{line:3,column:44}},'3':{start:{line:4,column:19},end:{line:4,column:48}},'4':{start:{line:5,column:20},end:{line:5,column:56}},'5':{start:{line:7,column:28},end:{line:7,column:29}},'6':{start:{line:8,column:22},end:{line:8,column:32}},'7':{start:{line:12,column:8},end:{line:12,column:37}},'8':{start:{line:13,column:8},end:{line:13,column:33}},'9':{start:{line:17,column:24},end:{line:17,column:118}},'10':{start:{line:18,column:8},end:{line:18,column:88}},'11':{start:{line:18,column:46},end:{line:18,column:68}},'12':{start:{line:31,column:8},end:{line:31,column:43}},'13':{start:{line:32,column:8},end:{line:34,column:23}},'14':{start:{line:38,column:22},end:{line:38,column:45}},'15':{start:{line:39,column:29},end:{line:39,column:47}},'16':{start:{line:40,column:26},end:{line:40,column:53}},'17':{start:{line:43,column:27},end:{line:43,column:77}},'18':{start:{line:47,column:8},end:{line:64,column:9}},'19':{start:{line:48,column:33},end:{line:61,column:14}},'20':{start:{line:63,column:12},end:{line:63,column:46}},'21':{start:{line:67,column:8},end:{line:84,column:9}},'22':{start:{line:68,column:36},end:{line:81,column:14}},'23':{start:{line:83,column:12},end:{line:83,column:49}},'24':{start:{line:86,column:8},end:{line:92,column:11}},'25':{start:{line:96,column:30},end:{line:96,column:34}},'26':{start:{line:97,column:20},end:{line:97,column:36}},'27':{start:{line:98,column:20},end:{line:98,column:45}},'28':{start:{line:103,column:8},end:{line:108,column:48}},'29':{start:{line:104,column:12},end:{line:104,column:58}},'30':{start:{line:105,column:12},end:{line:105,column:26}},'31':{start:{line:106,column:12},end:{line:106,column:40}},'32':{start:{line:107,column:12},end:{line:107,column:52}},'33':{start:{line:109,column:8},end:{line:109,column:140}},'34':{start:{line:110,column:8},end:{line:110,column:21}},'35':{start:{line:114,column:0},end:{line:114,column:23}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:11,column:4},end:{line:11,column:5}},loc:{start:{line:11,column:38},end:{line:14,column:5}},line:11},'1':{name:'(anonymous_1)',decl:{start:{line:16,column:4},end:{line:16,column:5}},loc:{start:{line:16,column:18},end:{line:35,column:5}},line:16},'2':{name:'(anonymous_2)',decl:{start:{line:18,column:36},end:{line:18,column:37}},loc:{start:{line:18,column:46},end:{line:18,column:68}},line:18},'3':{name:'(anonymous_3)',decl:{start:{line:37,column:4},end:{line:37,column:5}},loc:{start:{line:37,column:77},end:{line:93,column:5}},line:37},'4':{name:'(anonymous_4)',decl:{start:{line:95,column:4},end:{line:95,column:5}},loc:{start:{line:95,column:47},end:{line:111,column:5}},line:95}},branchMap:{'0':{loc:{start:{line:47,column:8},end:{line:64,column:9}},type:'if',locations:[{start:{line:47,column:8},end:{line:64,column:9}},{start:{line:47,column:8},end:{line:64,column:9}}],line:47},'1':{loc:{start:{line:67,column:8},end:{line:84,column:9}},type:'if',locations:[{start:{line:67,column:8},end:{line:84,column:9}},{start:{line:67,column:8},end:{line:84,column:9}}],line:67}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0,'16':0,'17':0,'18':0,'19':0,'20':0,'21':0,'22':0,'23':0,'24':0,'25':0,'26':0,'27':0,'28':0,'29':0,'30':0,'31':0,'32':0,'33':0,'34':0,'35':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const R=(++cov_2cklmrsl45.s[0],require('ramda'));const spawn=(++cov_2cklmrsl45.s[1],require('threads').spawn);const Block=(++cov_2cklmrsl45.s[2],require('../blockchain/block'));const CryptoUtil=(++cov_2cklmrsl45.s[3],require('../util/cryptoUtil'));const Transaction=(++cov_2cklmrsl45.s[4],require('../blockchain/transaction'));const FEE_PER_TRANSACTION=(++cov_2cklmrsl45.s[5],1);const MINING_REWARD=(++cov_2cklmrsl45.s[6],5000000000);class Miner{constructor(blockchain,logLevel){++cov_2cklmrsl45.f[0];++cov_2cklmrsl45.s[7];this.blockchain=blockchain;++cov_2cklmrsl45.s[8];this.logLevel=logLevel;}mine(address){++cov_2cklmrsl45.f[1];let baseBlock=(++cov_2cklmrsl45.s[9],Miner.generateNextBlock(address,this.blockchain.getLastBlock(),this.blockchain.transactions));++cov_2cklmrsl45.s[10];process.execArgv=R.reject(item=>{++cov_2cklmrsl45.f[2];++cov_2cklmrsl45.s[11];return item.includes('debug');},process.execArgv);/* istanbul ignore next */const thread=spawn(function(input,done){/*eslint-disable */require(input.__dirname+'/../util/consoleWrapper.js')('mine-worker',input.logLevel);const Block=require(input.__dirname+'/../blockchain/block');const Miner=require(input.__dirname);/*eslint-enable */done(Miner.proveWorkFor(Block.fromJson(input.jsonBlock),input.difficulty));});++cov_2cklmrsl45.s[12];console.info('Mining a new block');++cov_2cklmrsl45.s[13];return thread.send({__dirname:__dirname,logLevel:this.logLevel,jsonBlock:baseBlock,difficulty:this.blockchain.getDifficulty()}).promise();}static generateNextBlock(address,previousBlock,blockchainTransactions){++cov_2cklmrsl45.f[3];const index=(++cov_2cklmrsl45.s[14],previousBlock.index+1);const previousHash=(++cov_2cklmrsl45.s[15],previousBlock.hash);const timestamp=(++cov_2cklmrsl45.s[16],new Date().getTime()/1000);// Get the first two avaliable transactions, if there aren't 2, it's empty
let transactions=(++cov_2cklmrsl45.s[17],R.defaultTo([],R.take(2,blockchainTransactions)));// Add fee transaction (1 satoshi per transaction)
// INFO: Usually it's a fee over transaction size (not amount)
++cov_2cklmrsl45.s[18];if(transactions.length>0){++cov_2cklmrsl45.b[0][0];let feeTransaction=(++cov_2cklmrsl45.s[19],Transaction.fromJson({id:CryptoUtil.randomId(64),hash:null,type:'fee',data:{inputs:[],outputs:[{amount:FEE_PER_TRANSACTION*transactions.length,// satoshis format
address:address}]}}));++cov_2cklmrsl45.s[20];transactions.push(feeTransaction);}else{++cov_2cklmrsl45.b[0][1];}// Add reward transaction of 50 coins
++cov_2cklmrsl45.s[21];if(address!=null){++cov_2cklmrsl45.b[1][0];let rewardTransaction=(++cov_2cklmrsl45.s[22],Transaction.fromJson({id:CryptoUtil.randomId(64),hash:null,type:'reward',data:{inputs:[],outputs:[{amount:MINING_REWARD,// satoshis format
address:address}]}}));++cov_2cklmrsl45.s[23];transactions.push(rewardTransaction);}else{++cov_2cklmrsl45.b[1][1];}++cov_2cklmrsl45.s[24];return Block.fromJson({index,nonce:0,previousHash,timestamp,transactions});}static proveWorkFor(jsonBlock,difficulty){++cov_2cklmrsl45.f[4];let blockDifficulty=(++cov_2cklmrsl45.s[25],null);let start=(++cov_2cklmrsl45.s[26],process.hrtime());let block=(++cov_2cklmrsl45.s[27],Block.fromJson(jsonBlock));// INFO: Every cryptocurrency has a different way to prove work, this is a simple hash sequence
// Loop incrementing the nonce to find the hash at desired difficulty
++cov_2cklmrsl45.s[28];do{++cov_2cklmrsl45.s[29];block.timestamp=new Date().getTime()/1000;++cov_2cklmrsl45.s[30];block.nonce++;++cov_2cklmrsl45.s[31];block.hash=block.toHash();++cov_2cklmrsl45.s[32];blockDifficulty=block.getDifficulty();}while(blockDifficulty>=difficulty);++cov_2cklmrsl45.s[33];console.info(`Block found: time '${process.hrtime(start)[0]} sec' dif '${difficulty}' hash '${block.hash}' nonce '${block.nonce}'`);++cov_2cklmrsl45.s[34];return block;}}++cov_2cklmrsl45.s[35];module.exports=Miner;