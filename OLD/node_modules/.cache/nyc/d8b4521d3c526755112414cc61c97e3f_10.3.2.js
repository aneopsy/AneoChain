var cov_1jsx7bgvum=function(){var path='/home/aneopsy/AneoChain/src/blockchain/block.js',hash='3a3c95b94671999eb8e787d0e07dbf4e054343d2',global=new Function('return this')(),gcv='__coverage__',coverageData={path:'/home/aneopsy/AneoChain/src/blockchain/block.js',statementMap:{'0':{start:{line:1,column:10},end:{line:1,column:26}},'1':{start:{line:2,column:19},end:{line:2,column:48}},'2':{start:{line:3,column:20},end:{line:3,column:44}},'3':{start:{line:4,column:21},end:{line:4,column:46}},'4':{start:{line:29,column:4},end:{line:29,column:125}},'5':{start:{line:33,column:4},end:{line:33,column:52}},'6':{start:{line:37,column:23},end:{line:53,column:6}},'7':{start:{line:55,column:4},end:{line:55,column:24}},'8':{start:{line:59,column:16},end:{line:59,column:27}},'9':{start:{line:60,column:4},end:{line:66,column:13}},'10':{start:{line:61,column:6},end:{line:65,column:7}},'11':{start:{line:62,column:8},end:{line:62,column:50}},'12':{start:{line:64,column:8},end:{line:64,column:27}},'13':{start:{line:68,column:4},end:{line:68,column:32}},'14':{start:{line:69,column:4},end:{line:69,column:17}},'15':{start:{line:74,column:0},end:{line:74,column:23}}},fnMap:{'0':{name:'(anonymous_0)',decl:{start:{line:28,column:2},end:{line:28,column:3}},loc:{start:{line:28,column:11},end:{line:30,column:3}},line:28},'1':{name:'(anonymous_1)',decl:{start:{line:32,column:2},end:{line:32,column:3}},loc:{start:{line:32,column:18},end:{line:34,column:3}},line:32},'2':{name:'(anonymous_2)',decl:{start:{line:36,column:2},end:{line:36,column:3}},loc:{start:{line:36,column:23},end:{line:56,column:3}},line:36},'3':{name:'(anonymous_3)',decl:{start:{line:58,column:2},end:{line:58,column:3}},loc:{start:{line:58,column:24},end:{line:70,column:3}},line:58},'4':{name:'(anonymous_4)',decl:{start:{line:60,column:24},end:{line:60,column:25}},loc:{start:{line:60,column:40},end:{line:66,column:5}},line:60}},branchMap:{'0':{loc:{start:{line:61,column:6},end:{line:65,column:7}},type:'if',locations:[{start:{line:61,column:6},end:{line:65,column:7}},{start:{line:61,column:6},end:{line:65,column:7}}],line:61},'1':{loc:{start:{line:61,column:10},end:{line:61,column:40}},type:'binary-expr',locations:[{start:{line:61,column:10},end:{line:61,column:31}},{start:{line:61,column:35},end:{line:61,column:40}}],line:61}},s:{'0':0,'1':0,'2':0,'3':0,'4':0,'5':0,'6':0,'7':0,'8':0,'9':0,'10':0,'11':0,'12':0,'13':0,'14':0,'15':0},f:{'0':0,'1':0,'2':0,'3':0,'4':0},b:{'0':[0,0],'1':[0,0]},_coverageSchema:'332fd63041d2c1bcb487cc26dd0d5f7d97098a6c'},coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}coverageData.hash=hash;return coverage[path]=coverageData;}();const R=(++cov_1jsx7bgvum.s[0],require('ramda'));const CryptoUtil=(++cov_1jsx7bgvum.s[1],require('../util/cryptoUtil'));const Transaction=(++cov_1jsx7bgvum.s[2],require('./transaction'));const Transactions=(++cov_1jsx7bgvum.s[3],require('./transactions'));/*
{ // Block
    "index": 0, // (first block: 0)
    "previousHash": "0", // (hash of previous block, first block is 0) (64 bytes)
    "timestamp": 1465154705, // number of seconds since January 1, 1970
    "nonce": 0, // nonce used to identify the proof-of-work step.
    "transactions": [ // list of transactions inside the block
        { // transaction 0
            "id": "63ec3ac02f...8d5ebc6dba", // random id (64 bytes)
            "hash": "563b8aa350...3eecfbd26b", // hash taken from the contents of the transaction: sha256 (id + data) (64 bytes)
            "type": "regular", // transaction type (regular, fee, reward)
            "data": {
                "inputs": [], // list of input transactions
                "outputs": [] // list of output transactions
            }
        }
    ],
    "hash": "c4e0b8df46...199754d1ed" // hash taken from the contents of the block: sha256 (index + previousHash + timestamp + nonce + transactions) (64 bytes)
}
*/class Block{toHash(){++cov_1jsx7bgvum.f[0];++cov_1jsx7bgvum.s[4];return CryptoUtil.hash(this.index+this.previousHash+this.timestamp+JSON.stringify(this.transactions)+this.nonce);}getDifficulty(){++cov_1jsx7bgvum.f[1];++cov_1jsx7bgvum.s[5];return parseInt(this.hash.substring(0,14),16);}static get genesis(){++cov_1jsx7bgvum.f[2];let genesisBlock=(++cov_1jsx7bgvum.s[6],Block.fromJson({index:0,previousHash:'0',timestamp:1465154705,nonce:0,transactions:[Transaction.fromJson({id:'63ec3ac02f822450039df13ddf7c3c0f19bab4acd4dc928c62fcd78d5ebc6dba',hash:null,type:'regular',data:{inputs:[],outputs:[]}})]}));++cov_1jsx7bgvum.s[7];return genesisBlock;}static fromJson(data){++cov_1jsx7bgvum.f[3];let block=(++cov_1jsx7bgvum.s[8],new Block());++cov_1jsx7bgvum.s[9];R.forEachObjIndexed((value,key)=>{++cov_1jsx7bgvum.f[4];++cov_1jsx7bgvum.s[10];if((++cov_1jsx7bgvum.b[1][0],key=='transactions')&&(++cov_1jsx7bgvum.b[1][1],value)){++cov_1jsx7bgvum.b[0][0];++cov_1jsx7bgvum.s[11];block[key]=Transactions.fromJson(value);}else{++cov_1jsx7bgvum.b[0][1];++cov_1jsx7bgvum.s[12];block[key]=value;}},data);++cov_1jsx7bgvum.s[13];block.hash=block.toHash();++cov_1jsx7bgvum.s[14];return block;}}++cov_1jsx7bgvum.s[15];module.exports=Block;